latitude: 37.78825 + (Math.random() - 0.5) * 0.002,
            longitude: -122.4324 + (Math.random() - 0.5) * 0.002,
          },
        }));
        
        setParkingSpots(spots);
        setLoading(false);
      }, 1000);
    };

    loadParkingSpots();
  }, []);

  const renderParkingSpotMarker = (spot) => {
    const markerColor = spot.occupied ? COLORS.danger : COLORS.success;
    
    return (
      <Marker
        key={spot.id}
        coordinate={spot.coordinates}
        title={spot.label}
        description={spot.occupied ? 'Occupied' : 'Available'}
        pinColor={markerColor}
      />
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={COLORS.background} />
      
      <View style={styles.mapHeader}>
        <Text style={styles.mapHeaderTitle}>Find Parking</Text>
        <Text style={styles.mapHeaderSubtitle}>
          Available spots: {parkingSpots.filter(spot => !spot.occupied).length}
        </Text>
      </View>
      
      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={COLORS.primary} />
          <Text style={styles.loadingText}>Loading parking spots...</Text>
        </View>
      ) : (
        <View style={styles.mapContainer}>
          <MapView
            style={styles.map}
            initialRegion={{
              latitude: 37.78825,
              longitude: -122.4324,
              latitudeDelta: 0.015,
              longitudeDelta: 0.0121,
            }}
          >
            {parkingSpots.map(renderParkingSpotMarker)}
          </MapView>
          
          <View style={styles.mapLegend}>
            <View style={styles.legendItem}>
              <View style={[styles.legendDot, { backgroundColor: COLORS.success }]} />
              <Text style={styles.legendText}>Available</Text>
            </View>
            <View style={styles.legendItem}>
              <View style={[styles.legendDot, { backgroundColor: COLORS.danger }]} />
              <Text style={styles.legendText}>Occupied</Text>
            </View>
          </View>
          
          <TouchableOpacity style={styles.directionsButton}>
            <Icon name="directions" size={20} color={COLORS.white} />
            <Text style={styles.directionsButtonText}>Navigate</Text>
          </TouchableOpacity>
        </View>
      )}
    </SafeAreaView>
  );
};

// Reserve Spot Screen
const ReserveSpotScreen = ({ navigation }) => {
  const [loading, setLoading] = useState(true);
  const [availableSpots, setAvailableSpots] = useState([]);
  const [selectedSpot, setSelectedSpot] = useState(null);
  const [date, setDate] = useState(new Date());
  const [startTime, setStartTime] = useState(new Date());
  const [endTime, setEndTime] = useState(new Date(Date.now() + 2 * 60 * 60 * 1000)); // Default: 2 hours from now
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showStartTimePicker, setShowStartTimePicker] = useState(false);
  const [showEndTimePicker, setShowEndTimePicker] = useState(false);

  useEffect(() => {
    // Load available spots
    const loadAvailableSpots = () => {
      // In a real app, we would call an API
      // For demo, simulate API call
      setTimeout(() => {
        // Mock available spots
        const spots = Array.from({ length: 8 }, (_, i) => ({
          id: i + 1,
          label: `Spot #${i + 1}`,
        }));
        
        setAvailableSpots(spots);
        setLoading(false);
      }, 1000);
    };

    loadAvailableSpots();
  }, []);

  const handleReservation = () => {
    if (!selectedSpot) {
      Alert.alert('Error', 'Please select a parking spot');
      return;
    }

    // In a real app, we would call an API
    // For demo, simulate API call
    Alert.alert(
      'Confirm Reservation',
      `Do you want to reserve ${selectedSpot.label} from ${startTime.toLocaleTimeString()} to ${endTime.toLocaleTimeString()}?`,
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Confirm',
          onPress: () => {
            // Show loading indicator
            setLoading(true);
            
            // Simulate API call
            setTimeout(() => {
              setLoading(false);
              Alert.alert(
                'Reservation Complete',
                `You have successfully reserved ${selectedSpot.label}`,
                [
                  {
                    text: 'OK',
                    onPress: () => navigation.navigate('Reservations'),
                  },
                ]
              );
            }, 1000);
          },
        },
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={COLORS.background} />
      
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={styles.header}>
          <Text style={styles.headerTitle}>Reserve a Spot</Text>
        </View>
        
        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color={COLORS.primary} />
            <Text style={styles.loadingText}>Loading available spots...</Text>
          </View>
        ) : (
          <View style={styles.reservationForm}>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Select a Parking Spot</Text>
              <View style={styles.spotSelector}>
                {availableSpots.map(spot => (
                  <TouchableOpacity
                    key={spot.id}
                    style={[
                      styles.spotButton,
                      selectedSpot && selectedSpot.id === spot.id && styles.spotButtonSelected,
                    ]}
                    onPress={() => setSelectedSpot(spot)}
                  >
                    <Text
                      style={[
                        styles.spotButtonText,
                        selectedSpot && selectedSpot.id === spot.id && styles.spotButtonTextSelected,
                      ]}
                    >
                      {spot.label}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
            
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Date</Text>
              <TouchableOpacity
                style={styles.dateTimePicker}
                onPress={() => setShowDatePicker(true)}
              >
                <Icon name="calendar-alt" size={20} color={COLORS.gray} />
                <Text style={styles.dateTimeText}>
                  {date.toLocaleDateString()}
                </Text>
              </TouchableOpacity>
              
              {showDatePicker && (
                <DateTimePicker
                  value={date}
                  mode="date"
                  display="default"
                  minimumDate={new Date()}
                  onChange={(event, selectedDate) => {
                    setShowDatePicker(false);
                    if (selectedDate) setDate(selectedDate);
                  }}
                />
              )}
            </View>
            
            <View style={styles.timeRow}>
              <View style={[styles.formGroup, styles.timeGroup]}>
                <Text style={styles.formLabel}>Start Time</Text>
                <TouchableOpacity
                  style={styles.dateTimePicker}
                  onPress={() => setShowStartTimePicker(true)}
                >
                  <Icon name="clock" size={20} color={COLORS.gray} />
                  <Text style={styles.dateTimeText}>
                    {startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </Text>
                </TouchableOpacity>
                
                {showStartTimePicker && (
                  <DateTimePicker
                    value={startTime}
                    mode="time"
                    display="default"
                    onChange={(event, selectedTime) => {
                      setShowStartTimePicker(false);
                      if (selectedTime) setStartTime(selectedTime);
                    }}
                  />
                )}
              </View>
              
              <View style={[styles.formGroup, styles.timeGroup]}>
                <Text style={styles.formLabel}>End Time</Text>
                <TouchableOpacity
                  style={styles.dateTimePicker}
                  onPress={() => setShowEndTimePicker(true)}
                >
                  <Icon name="clock" size={20} color={COLORS.gray} />
                  <Text style={styles.dateTimeText}>
                    {endTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </Text>
                </TouchableOpacity>
                
                {showEndTimePicker && (
                  <DateTimePicker
                    value={endTime}
                    mode="time"
                    display="default"
                    minimumDate={startTime}
                    onChange={(event, selectedTime) => {
                      setShowEndTimePicker(false);
                      if (selectedTime) setEndTime(selectedTime);
                    }}
                  />
                )}
              </View>
            </View>
            
            <TouchableOpacity
              style={styles.reserveButton}
              onPress={handleReservation}
            >
              <Text style={styles.reserveButtonText}>Reserve Spot</Text>
            </TouchableOpacity>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

// Reservations Screen
const ReservationsScreen = () => {
  const [loading, setLoading] = useState(true);
  const [reservations, setReservations] = useState([]);
  const [refreshing, setRefreshing] = useState(false);

  const loadReservations = () => {
    // In a real app, we would call an API
    // For demo, simulate API call
    setTimeout(() => {
      // Mock reservations
      const mockReservations = [
        {
          id: 1,
          spotId: 5,
          spotLabel: 'Spot #5',
          startTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),
          endTime: new Date(Date.now() + 4 * 60 * 60 * 1000).toISOString(),
          status: 'active',
        },
        {
          id: 2,
          spotId: 12,
          spotLabel: 'Spot #12',
          startTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
          endTime: new Date(Date.now() + 28 * 60 * 60 * 1000).toISOString(),
          status: 'active',
        },
        {
          id: 3,
          spotId: 7,
          spotLabel: 'Spot #7',
          startTime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
          endTime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000).toISOString(),
          status: 'completed',
        },
      ];
      
      setReservations(mockReservations);
      setLoading(false);
      setRefreshing(false);
    }, 1000);
  };

  const onRefresh = () => {
    setRefreshing(true);
    loadReservations();
  };

  useEffect(() => {
    loadReservations();
  }, []);

  const cancelReservation = (id) => {
    Alert.alert(
      'Cancel Reservation',
      'Are you sure you want to cancel this reservation?',
      [
        {
          text: 'No',
          style: 'cancel',
        },
        {
          text: 'Yes',
          onPress: () => {
            // In a real app, we would call an API
            // For demo, simulate API call
            setLoading(true);
            
            setTimeout(() => {
              // Filter out the cancelled reservation
              setReservations(reservations.filter(res => res.id !== id));
              setLoading(false);
              
              Alert.alert('Success', 'Reservation cancelled successfully');
            }, 1000);
          },
        },
      ]
    );
  };

  const formatDateTime = (dateTimeString) => {
    const date = new Date(dateTimeString);
    return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={COLORS.background} />
      
      <ScrollView
        contentContainerStyle={styles.scrollContent}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={[COLORS.primary]}
          />
        }
      >
        <View style={styles.header}>
          <Text style={styles.headerTitle}>My Reservations</Text>
        </View>
        
        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color={COLORS.primary} />
            <Text style={styles.loadingText}>Loading reservations...</Text>
          </View>
        ) : reservations.length === 0 ? (
          <View style={styles.emptyContainer}>
            <Icon name="calendar-times" size={60} color={COLORS.lightGray} />
            <Text style={styles.emptyText}>You have no reservations</Text>
            <TouchableOpacity
              style={styles.emptyButton}
              onPress={() => navigation.navigate('ReserveSpot')}
            >
              <Text style={styles.emptyButtonText}>Reserve a Spot</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <View>
            <Text style={styles.sectionTitle}>Active Reservations</Text>
            
            {reservations
              .filter(res => res.status === 'active')
              .map(reservation => (
                <View key={reservation.id} style={styles.reservationCard}>
                  <View style={styles.reservationHeader}>
                    <Text style={styles.reservationSpot}>{reservation.spotLabel}</Text>
                    <View style={styles.reservationStatus}>
                      <View style={styles.statusDot} />
                      <Text style={styles.statusText}>Active</Text>
                    </View>
                  </View>
                  
                  <View style={styles.reservationDetails}>
                    <View style={styles.reservationDetailItem}>
                      <Icon name="calendar-alt" size={16} color={COLORS.gray} />
                      <Text style={styles.reservationDetailText}>
                        {formatDateTime(reservation.startTime)} - {formatDateTime(reservation.endTime)}
                      </Text>
                    </View>
                  </View>
                  
                  <View style={styles.reservationActions}>
                    <TouchableOpacity
                      style={styles.reservationActionButton}
                      onPress={() => {/* View details */}}
                    >
                      <Icon name="eye" size={16} color={COLORS.primary} />
                      <Text style={[styles.reservationActionText, { color: COLORS.primary }]}>
                        Details
                      </Text>
                    </TouchableOpacity>
                    
                    <TouchableOpacity
                      style={styles.reservationActionButton}
                      onPress={() => cancelReservation(reservation.id)}
                    >
                      <Icon name="times" size={16} color={COLORS.danger} />
                      <Text style={[styles.reservationActionText, { color: COLORS.danger }]}>
                        Cancel
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))}
            
            <Text style={styles.sectionTitle}>Past Reservations</Text>
            
            {reservations
              .filter(res => res.status === 'completed')
              .map(reservation => (
                <View key={reservation.id} style={styles.reservationCard}>
                  <View style={styles.reservationHeader}>
                    <Text style={styles.reservationSpot}>{reservation.spotLabel}</Text>
                    <View style={[styles.reservationStatus, styles.completedStatus]}>
                      <View style={[styles.statusDot, styles.completedDot]} />
                      <Text style={styles.completedText}>Completed</Text>
                    </View>
                  </View>
                  
                  <View style={styles.reservationDetails}>
                    <View style={styles.reservationDetailItem}>
                      <Icon name="calendar-alt" size={16} color={COLORS.gray} />
                      <Text style={styles.reservationDetailText}>
                        {formatDateTime(reservation.startTime)} - {formatDateTime(reservation.endTime)}
                      </Text>
                    </View>
                  </View>
                  
                  <View style={styles.reservationActions}>
                    <TouchableOpacity
                      style={styles.reservationActionButton}
                      onPress={() => {/* View details */}}
                    >
                      <Icon name="eye" size={16} color={COLORS.primary} />
                      <Text style={[styles.reservationActionText, { color: COLORS.primary }]}>
                        Details
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))}
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

// Profile Screen
const ProfileScreen = ({ navigation }) => {
  const [user, setUser] = useState({
    username: 'John Smith',
    email: 'john.smith@example.com',
    joined: 'January 15, 2025',
    notifications: true,
  });

  const handleLogout = async () => {
    Alert.alert(
      'Logout',
      'Are you sure you want to logout?',
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Logout',
          onPress: async () => {
            // Clear user data from storage
            await AsyncStorage.removeItem('user');
            // Navigate to auth screen
            navigation.reset({
              index: 0,
              routes: [{ name: 'Auth' }],
            });
          },
        },
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={COLORS.background} />
      
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={styles.header}>
          <Text style={styles.headerTitle}>My Profile</Text>
        </View>
        
        <View style={styles.profileHeader}>
          <View style={styles.profileAvatar}>
            <Text style={styles.profileAvatarText}>
              {user.username.split(' ').map(name => name[0]).join('')}
            </Text>
          </View>
          <Text style={styles.profileName}>{user.username}</Text>
          <Text style={styles.profileEmail}>{user.email}</Text>
          <Text style={styles.profileJoined}>Joined {user.joined}</Text>
        </View>
        
        <View style={styles.settingsSection}>
          <Text style={styles.settingsSectionTitle}>Account Settings</Text>
          
          <TouchableOpacity style={styles.settingsItem}>
            <View style={styles.settingsItemLeft}>
              <Icon name="user-edit" size={20} color={COLORS.primary} style={styles.settingsIcon} />
              <Text style={styles.settingsItemText}>Edit Profile</Text>
            </View>
            <Icon name="chevron-right" size={16} color={COLORS.gray} />
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.settingsItem}>
            <View style={styles.settingsItemLeft}>
              <Icon name="lock" size={20} color={COLORS.primary} style={styles.settingsIcon} />
              <Text style={styles.settingsItemText}>Change Password</Text>
            </View>
            <Icon name="chevron-right" size={16} color={COLORS.gray} />
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.settingsItem}>
            <View style={styles.settingsItemLeft}>
              <Icon name="bell" size={20} color={COLORS.primary} style={styles.settingsIcon} />
              <Text style={styles.settingsItemText}>Notifications</Text>
            </View>
            <Switch
              value={user.notifications}
              onValueChange={(value) => setUser({ ...user, notifications: value })}
              trackColor={{ false: COLORS.lightGray, true: COLORS.primary }}
              thumbColor={COLORS.white}
            />
          </TouchableOpacity>
        </View>
        
        <View style={styles.settingsSection}>
          <Text style={styles.settingsSectionTitle}>App Settings</Text>
          
          <TouchableOpacity style={styles.settingsItem}>
            <View style={styles.settingsItemLeft}>
              <Icon name="language" size={20} color={COLORS.primary} style={styles.settingsIcon} />
              <Text style={styles.settingsItemText}>Language</Text>
            </View>
            <View style={styles.settingsItemRight}>
              <Text style={styles.settingsItemValue}>English</Text>
              <Icon name="chevron-right" size={16} color={COLORS.gray} />
            </View>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.settingsItem}>
            <View style={styles.settingsItemLeft}>
              <Icon name="moon" size={20} color={COLORS.primary} style={styles.settingsIcon} />
              <Text style={styles.settingsItemText}>Dark Mode</Text>
            </View>
            <Switch
              value={false}
              trackColor={{ false: COLORS.lightGray, true: COLORS.primary }}
              thumbColor={COLORS.white}
            />
          </TouchableOpacity>
        </View>
        
        <View style={styles.settingsSection}>
          <Text style={styles.settingsSectionTitle}>Support</Text>
          
          <TouchableOpacity style={styles.settingsItem}>
            <View style={styles.settingsItemLeft}>
              <Icon name="question-circle" size={20} color={COLORS.primary} style={styles.settingsIcon} />
              <Text style={styles.settingsItemText}>Help & Support</Text>
            </View>
            <Icon name="chevron-right" size={16} color={COLORS.gray} />
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.settingsItem}>
            <View style={styles.settingsItemLeft}>
              <Icon name="file-alt" size={20} color={COLORS.primary} style={styles.settingsIcon} />
              <Text style={styles.settingsItemText}>Terms & Privacy Policy</Text>
            </View>
            <Icon name="chevron-right" size={16} color={COLORS.gray} />
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.settingsItem}>
            <View style={styles.settingsItemLeft}>
              <Icon name="info-circle" size={20} color={COLORS.primary} style={styles.settingsIcon} />
              <Text style={styles.settingsItemText}>About</Text>
            </View>
            <Icon name="chevron-right" size={16} color={COLORS.gray} />
          </TouchableOpacity>
        </View>
        
        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
          <Icon name="sign-out-alt" size={20} color={COLORS.white} />
          <Text style={styles.logoutButtonText}>Logout</Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

// =====================
// Navigation Configuration
// =====================

// Authentication Stack
const AuthStack = () => (
  <Stack.Navigator screenOptions={{ headerShown: false }}>
    <Stack.Screen name="Login" component={LoginScreen} />
    <Stack.Screen name="Register" component={RegisterScreen} />
  </Stack.Navigator>
);

// Main App Tabs
const MainTabs = () => (
  <Tab.Navigator
    screenOptions={({ route }) => ({
      tabBarIcon: ({ focused, color, size }) => {
        let iconName;

        if (route.name === 'Home') {
          iconName = 'home';
        } else if (route.name === 'FindParking') {
          iconName = 'map-marker-alt';
        } else if (route.name === 'Reservations') {
          iconName = 'calendar-alt';
        } else if (route.name === 'Profile') {
          iconName = 'user';
        }

        return <Icon name={iconName} size={size} color={color} />;
      },
      tabBarActiveTintColor: COLORS.primary,
      tabBarInactiveTintColor: COLORS.gray,
      headerShown: false,
      tabBarStyle: {
        backgroundColor: COLORS.white,
        borderTopColor: COLORS.lightGray,
        paddingTop: 5,
        paddingBottom: 5,
      },
      tabBarLabelStyle: {
        fontSize: 12,
        fontWeight: '500',
      },
    })}
  >
    <Tab.Screen name="Home" component={HomeScreen} />
    <Tab.Screen 
      name="FindParking" 
      component={FindParkingScreen}
      options={{ title: 'Find Parking' }}
    />
    <Tab.Screen name="Reservations" component={ReservationsScreen} />
    <Tab.Screen name="Profile" component={ProfileScreen} />
  </Tab.Navigator>
);

// Main Stack
const MainStack = () => (
  <Stack.Navigator screenOptions={{ headerShown: false }}>
    <Stack.Screen name="Tabs" component={MainTabs} />
    <Stack.Screen name="ReserveSpot" component={ReserveSpotScreen} />
  </Stack.Navigator>
);

// Root Navigator
const App = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [userToken, setUserToken] = useState(null);

  useEffect(() => {
    // Check if user is logged in
    const bootstrapAsync = async () => {
      let token = null;

      try {
        const userData = await AsyncStorage.getItem('user');
        if (userData) {
          token = JSON.parse(userData);
        }
      } catch (e) {
        console.log('Failed to get user data from storage', e);
      }

      setUserToken(token);
      setIsLoading(false);
    };

    bootstrapAsync();
  }, []);

  if (isLoading) {
    return (
      <View style={styles.splashContainer}>
        <ActivityIndicator size="large" color={COLORS.primary} />
      </View>
    );
  }

  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }}>
        {userToken == null ? (
          <Stack.Screen name="Auth" component={AuthStack} />
        ) : (
          <Stack.Screen name="Main" component={MainStack} />
        )}
      </Stack.Navigator>
    </NavigationContainer>
  );
};

// =====================
// Styles
// =====================

const styles = StyleSheet.create({
  // General
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  scrollContent: {
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.dark,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 10,
    marginBottom: 20,
  },
  authButtonText: {
    color: COLORS.white,
    fontSize: 16,
    fontWeight: 'bold',
  },
  authLinkContainer: {
    alignItems: 'center',
  },
  authLinkText: {
    color: COLORS.gray,
  },
  authLinkHighlight: {
    color: COLORS.primary,
    fontWeight: 'bold',
  },
  
  // Home Screen
  welcomeContainer: {
    marginBottom: 20,
  },
  welcomeText: {
    fontSize: 16,
    color: COLORS.gray,
  },
  userName: {
    fontSize: 22,
    fontWeight: 'bold',
    color: COLORS.dark,
  },
  avatarContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: COLORS.primary,
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatarText: {
    color: COLORS.white,
    fontWeight: 'bold',
    fontSize: 16,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  statItem: {
    flex: 1,
    backgroundColor: COLORS.white,
    borderRadius: 10,
    padding: 15,
    marginHorizontal: 5,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  statIconContainer: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 10,
  },
  statValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.dark,
  },
  statLabel: {
    fontSize: 12,
    color: COLORS.gray,
    marginTop: 5,
  },
  card: {
    backgroundColor: COLORS.white,
    borderRadius: 10,
    padding: 15,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.dark,
  },
  actionCard: {
    backgroundColor: COLORS.white,
    borderRadius: 10,
    padding: 15,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  actionCardHeader: {
    marginBottom: 15,
  },
  actionCardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.dark,
  },
  actionButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  actionButton: {
    alignItems: 'center',
    flex: 1,
    paddingHorizontal: 5,
  },
  actionIconContainer: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
  },
  actionText: {
    fontSize: 12,
    color: COLORS.dark,
    textAlign: 'center',
  },
  cameraPreview: {
    width: '100%',
    height: 180,
    borderRadius: 8,
    marginBottom: 10,
  },
  liveIndicator: {
    position: 'absolute',
    top: 55,
    left: 25,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.6)',
    borderRadius: 4,
    paddingVertical: 4,
    paddingHorizontal: 8,
  },
  liveIndicatorDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: COLORS.danger,
    marginRight: 5,
  },
  liveIndicatorText: {
    color: COLORS.white,
    fontSize: 12,
    fontWeight: 'bold',
  },
  cameraUpdateTime: {
    fontSize: 12,
    color: COLORS.gray,
    textAlign: 'right',
  },
  
  // Find Parking Screen
  mapHeader: {
    padding: 15,
    backgroundColor: COLORS.white,
    borderRadius: 10,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  mapHeaderTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.dark,
    marginBottom: 5,
  },
  mapHeaderSubtitle: {
    fontSize: 14,
    color: COLORS.gray,
  },
  mapContainer: {
    flex: 1,
    borderRadius: 10,
    overflow: 'hidden',
    height: 500,
    position: 'relative',
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
  mapLegend: {
    position: 'absolute',
    bottom: 70,
    left: 15,
    backgroundColor: COLORS.white,
    borderRadius: 5,
    padding: 10,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 5,
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 15,
  },
  legendDot: {
    width: 10,
    height: 10,
    borderRadius: 5,
    marginRight: 5,
  },
  legendText: {
    fontSize: 12,
    color: COLORS.dark,
  },
  directionsButton: {
    position: 'absolute',
    bottom: 15,
    right: 15,
    backgroundColor: COLORS.primary,
    borderRadius: 5,
    padding: 10,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 5,
  },
  directionsButtonText: {
    color: COLORS.white,
    fontWeight: 'bold',
    marginLeft: 5,
  },
  
  // Reserve Spot Screen
  reservationForm: {
    backgroundColor: COLORS.white,
    borderRadius: 10,
    padding: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  formGroup: {
    marginBottom: 20,
  },
  formLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: COLORS.dark,
    marginBottom: 10,
  },
  spotSelector: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginHorizontal: -5,
  },
  spotButton: {
    backgroundColor: COLORS.lightGray,
    borderRadius: 5,
    padding: 10,
    margin: 5,
    minWidth: 80,
    alignItems: 'center',
  },
  spotButtonSelected: {
    backgroundColor: COLORS.primary,
  },
  spotButtonText: {
    color: COLORS.dark,
    fontWeight: '500',
  },
  spotButtonTextSelected: {
    color: COLORS.white,
  },
  dateTimePicker: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: COLORS.lightGray,
    borderRadius: 5,
    paddingHorizontal: 15,
    paddingVertical: 12,
  },
  dateTimeText: {
    color: COLORS.dark,
    marginLeft: 10,
  },
  timeRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  timeGroup: {
    flex: 1,
    marginHorizontal: 5,
  },
  reserveButton: {
    backgroundColor: COLORS.primary,
    borderRadius: 5,
    padding: 15,
    alignItems: 'center',
    marginTop: 10,
  },
  reserveButtonText: {
    color: COLORS.white,
    fontWeight: 'bold',
    fontSize: 16,
  },
  
  // Reservations Screen
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 30,
  },
  emptyText: {
    fontSize: 16,
    color: COLORS.gray,
    marginTop: 15,
    marginBottom: 20,
    textAlign: 'center',
  },
  emptyButton: {
    backgroundColor: COLORS.primary,
    borderRadius: 5,
    padding: 12,
    alignItems: 'center',
    width: '60%',
  },
  emptyButtonText: {
    color: COLORS.white,
    fontWeight: 'bold',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.dark,
    marginBottom: 15,
    marginTop: 10,
  },
  reservationCard: {
    backgroundColor: COLORS.white,
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  reservationHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  reservationSpot: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.dark,
  },
  reservationStatus: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(46, 204, 113, 0.1)',
    borderRadius: 15,
    paddingVertical: 4,
    paddingHorizontal: 8,
  },
  completedStatus: {
    backgroundColor: 'rgba(52, 152, 219, 0.1)',
  },
  statusDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: COLORS.success,
    marginRight: 5,
  },
  completedDot: {
    backgroundColor: COLORS.primary,
  },
  statusText: {
    color: COLORS.success,
    fontSize: 12,
    fontWeight: '500',
  },
  completedText: {
    color: COLORS.primary,
    fontSize: 12,
    fontWeight: '500',
  },
  reservationDetails: {
    marginBottom: 15,
  },
  reservationDetailItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 5,
  },
  reservationDetailText: {
    color: COLORS.gray,
    marginLeft: 10,
    fontSize: 14,
  },
  reservationActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    borderTopWidth: 1,
    borderTopColor: COLORS.lightGray,
    paddingTop: 10,
  },
  reservationActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 15,
    padding: 5,
  },
  reservationActionText: {
    marginLeft: 5,
    fontSize: 14,
    fontWeight: '500',
  },
  
  // Profile Screen
  profileHeader: {
    alignItems: 'center',
    marginBottom: 30,
  },
  profileAvatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: COLORS.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 15,
  },
  profileAvatarText: {
    color: COLORS.white,
    fontWeight: 'bold',
    fontSize: 36,
  },
  profileName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.dark,
    marginBottom: 5,
  },
  profileEmail: {
    fontSize: 16,
    color: COLORS.gray,
    marginBottom: 10,
  },
  profileJoined: {
    fontSize: 14,
    color: COLORS.gray,
  },
  settingsSection: {
    backgroundColor: COLORS.white,
    borderRadius: 10,
    marginBottom: 20,
    padding: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
  },
  settingsSectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: COLORS.dark,
    marginBottom: 15,
  },
  settingsItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.lightGray,
  },
  settingsItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingsIcon: {
    marginRight: 15,
  },
  settingsItemText: {
    fontSize: 16,
    color: COLORS.dark,
  },
  settingsItemRight: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingsItemValue: {
    fontSize: 16,
    color: COLORS.gray,
    marginRight: 5,
  },
  logoutButton: {
    backgroundColor: COLORS.danger,
    borderRadius: 5,
    padding: 15,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 30,
  },
  logoutButtonText: {
    color: COLORS.white,
    fontWeight: 'bold',
    fontSize: 16,
    marginLeft: 10,
  },
});

// TextInput Component (required but wasn't defined earlier)
const TextInput = ({ style, ...props }) => {
  return <TextInput style={style} {...props} />;
};

// Switch Component (required but wasn't defined earlier)
const Switch = ({ value, onValueChange, trackColor, thumbColor }) => {
  return (
    <Switch
      value={value}
      onValueChange={onValueChange}
      trackColor={trackColor}
      thumbColor={thumbColor}
    />
  );
};

export default App;
    fontSize: 16,
    color: COLORS.gray,
  },
  
  // Splash Screen
  splashContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.white,
  },
  
  // Authentication
  authContainer: {
    flex: 1,
  },
  authScrollContent: {
    flexGrow: 1,
    justifyContent: 'center',
  },
  authContent: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 40,
  },
  logoText: {
    fontSize: 28,
    fontWeight: 'bold',
    color: COLORS.white,
    marginTop: 10,
  },
  formContainer: {
    backgroundColor: COLORS.white,
    borderRadius: 10,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 10,
    elevation: 5,
  },
  formTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: COLORS.dark,
    marginBottom: 20,
    textAlign: 'center',
  },
  errorContainer: {
    backgroundColor: 'rgba(231, 76, 60, 0.1)',
    borderRadius: 5,
    padding: 10,
    marginBottom: 15,
  },
  errorText: {
    color: COLORS.danger,
    textAlign: 'center',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: COLORS.lightGray,
    borderRadius: 5,
    marginBottom: 15,
    paddingHorizontal: 10,
  },
  inputIcon: {
    marginRight: 10,
  },
  input: {
    flex: 1,
    height: 50,
    color: COLORS.dark,
  },
  authButton: {
    backgroundColor: COLORS.primary,
    borderRadius: 5,
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 10,// App.js - Main entry point for the React Native mobile app

import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  StatusBar,
  TouchableOpacity,
  SafeAreaView,
  Image,
  ScrollView,
  RefreshControl,
  Alert,
  ActivityIndicator
} from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Icon from 'react-native-vector-icons/FontAwesome5';
import LinearGradient from 'react-native-linear-gradient';
import MapView, { Marker } from 'react-native-maps';
import DateTimePicker from '@react-native-community/datetimepicker';
import { API_BASE_URL } from './config';

// Create navigation containers
const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

// App Colors
const COLORS = {
  primary: '#3498db',
  secondary: '#2c3e50',
  success: '#2ecc71',
  danger: '#e74c3c',
  warning: '#f39c12',
  light: '#ecf0f1',
  dark: '#2c3e50',
  white: '#ffffff',
  background: '#f8f9fa',
  gray: '#6c757d',
  lightGray: '#dee2e6'
};

// =====================
// Authentication Screens
// =====================

// Login Screen
const LoginScreen = ({ navigation }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleLogin = async () => {
    if (!username || !password) {
      setError('Please enter both username and password');
      return;
    }
    
    setLoading(true);
    setError('');

    try {
      // In a real app, we would call an API
      // For demo, simulate API call
      setTimeout(async () => {
        // Simulate successful login
        const user = {
          id: 1,
          username: username,
          email: 'user@example.com',
        };
        
        // Store user data
        await AsyncStorage.setItem('user', JSON.stringify(user));
        setLoading(false);
        navigation.navigate('Main');
      }, 1000);
      
      /* Actual API call would look like:
      const response = await fetch(`${API_BASE_URL}/api/users/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username,
          password,
        }),
      });
      
      const data = await response.json();
      
      if (data.status === 'success') {
        await AsyncStorage.setItem('user', JSON.stringify(data.user));
        setLoading(false);
        navigation.navigate('Main');
      } else {
        setError(data.error || 'Login failed');
        setLoading(false);
      }
      */
    } catch (error) {
      setError('An error occurred. Please try again.');
      setLoading(false);
    }
  };

  return (
    <LinearGradient
      colors={[COLORS.primary, COLORS.secondary]}
      style={styles.authContainer}
    >
      <StatusBar barStyle="light-content" />
      <SafeAreaView style={styles.authContainer}>
        <View style={styles.authContent}>
          <View style={styles.logoContainer}>
            <Icon name="parking" size={60} color={COLORS.white} />
            <Text style={styles.logoText}>AI Parking</Text>
          </View>
          
          <View style={styles.formContainer}>
            <Text style={styles.formTitle}>Login to Your Account</Text>
            
            {error ? (
              <View style={styles.errorContainer}>
                <Text style={styles.errorText}>{error}</Text>
              </View>
            ) : null}
            
            <View style={styles.inputContainer}>
              <Icon name="user" size={20} color={COLORS.gray} style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Username"
                placeholderTextColor={COLORS.gray}
                value={username}
                onChangeText={setUsername}
                autoCapitalize="none"
              />
            </View>
            
            <View style={styles.inputContainer}>
              <Icon name="lock" size={20} color={COLORS.gray} style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Password"
                placeholderTextColor={COLORS.gray}
                value={password}
                onChangeText={setPassword}
                secureTextEntry
              />
            </View>
            
            <TouchableOpacity
              style={styles.authButton}
              onPress={handleLogin}
              disabled={loading}
            >
              {loading ? (
                <ActivityIndicator size="small" color={COLORS.white} />
              ) : (
                <Text style={styles.authButtonText}>Login</Text>
              )}
            </TouchableOpacity>
            
            <TouchableOpacity
              style={styles.authLinkContainer}
              onPress={() => navigation.navigate('Register')}
            >
              <Text style={styles.authLinkText}>
                Don't have an account? <Text style={styles.authLinkHighlight}>Register</Text>
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      </SafeAreaView>
    </LinearGradient>
  );
};

// Register Screen
const RegisterScreen = ({ navigation }) => {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleRegister = async () => {
    if (!username || !email || !password || !confirmPassword) {
      setError('Please fill in all fields');
      return;
    }
    
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    setLoading(true);
    setError('');

    try {
      // In a real app, we would call an API
      // For demo, simulate API call
      setTimeout(() => {
        setLoading(false);
        Alert.alert(
          'Registration Successful',
          'Your account has been created. Please login.',
          [{ text: 'OK', onPress: () => navigation.navigate('Login') }]
        );
      }, 1000);
      
      /* Actual API call would look like:
      const response = await fetch(`${API_BASE_URL}/api/users/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username,
          email,
          password,
        }),
      });
      
      const data = await response.json();
      
      if (data.status === 'success') {
        setLoading(false);
        Alert.alert(
          'Registration Successful',
          'Your account has been created. Please login.',
          [{ text: 'OK', onPress: () => navigation.navigate('Login') }]
        );
      } else {
        setError(data.error || 'Registration failed');
        setLoading(false);
      }
      */
    } catch (error) {
      setError('An error occurred. Please try again.');
      setLoading(false);
    }
  };

  return (
    <LinearGradient
      colors={[COLORS.primary, COLORS.secondary]}
      style={styles.authContainer}
    >
      <StatusBar barStyle="light-content" />
      <SafeAreaView style={styles.authContainer}>
        <ScrollView contentContainerStyle={styles.authScrollContent}>
          <View style={styles.authContent}>
            <View style={styles.logoContainer}>
              <Icon name="parking" size={60} color={COLORS.white} />
              <Text style={styles.logoText}>AI Parking</Text>
            </View>
            
            <View style={styles.formContainer}>
              <Text style={styles.formTitle}>Create an Account</Text>
              
              {error ? (
                <View style={styles.errorContainer}>
                  <Text style={styles.errorText}>{error}</Text>
                </View>
              ) : null}
              
              <View style={styles.inputContainer}>
                <Icon name="user" size={20} color={COLORS.gray} style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="Username"
                  placeholderTextColor={COLORS.gray}
                  value={username}
                  onChangeText={setUsername}
                  autoCapitalize="none"
                />
              </View>
              
              <View style={styles.inputContainer}>
                <Icon name="envelope" size={20} color={COLORS.gray} style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="Email"
                  placeholderTextColor={COLORS.gray}
                  value={email}
                  onChangeText={setEmail}
                  keyboardType="email-address"
                  autoCapitalize="none"
                />
              </View>
              
              <View style={styles.inputContainer}>
                <Icon name="lock" size={20} color={COLORS.gray} style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="Password"
                  placeholderTextColor={COLORS.gray}
                  value={password}
                  onChangeText={setPassword}
                  secureTextEntry
                />
              </View>
              
              <View style={styles.inputContainer}>
                <Icon name="lock" size={20} color={COLORS.gray} style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="Confirm Password"
                  placeholderTextColor={COLORS.gray}
                  value={confirmPassword}
                  onChangeText={setConfirmPassword}
                  secureTextEntry
                />
              </View>
              
              <TouchableOpacity
                style={styles.authButton}
                onPress={handleRegister}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator size="small" color={COLORS.white} />
                ) : (
                  <Text style={styles.authButtonText}>Register</Text>
                )}
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.authLinkContainer}
                onPress={() => navigation.navigate('Login')}
              >
                <Text style={styles.authLinkText}>
                  Already have an account? <Text style={styles.authLinkHighlight}>Login</Text>
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </ScrollView>
      </SafeAreaView>
    </LinearGradient>
  );
};

// =====================
// Main App Screens
// =====================

// Home Screen
const HomeScreen = ({ navigation }) => {
  const [loading, setLoading] = useState(true);
  const [parkingData, setParkingData] = useState(null);
  const [refreshing, setRefreshing] = useState(false);

  const loadParkingData = async () => {
    try {
      // In a real app, we would call an API
      // For demo, simulate API call
      setTimeout(() => {
        const mockData = {
          total_spots: 20,
          occupied_spots: 12,
          free_spots: 8,
          occupancy_rate: 0.6,
          timestamp: new Date().toISOString(),
        };
        
        setParkingData(mockData);
        setLoading(false);
        setRefreshing(false);
      }, 1000);
      
      /* Actual API call would look like:
      const response = await fetch(`${API_BASE_URL}/api/status`);
      const data = await response.json();
      setParkingData(data);
      setLoading(false);
      setRefreshing(false);
      */
    } catch (error) {
      console.error('Error loading parking data:', error);
      setLoading(false);
      setRefreshing(false);
      Alert.alert('Error', 'Failed to load parking data. Pull down to refresh.');
    }
  };

  const onRefresh = () => {
    setRefreshing(true);
    loadParkingData();
  };

  useEffect(() => {
    loadParkingData();
  }, []);

  const renderParkingStats = () => {
    if (!parkingData) return null;

    return (
      <View style={styles.statsContainer}>
        <View style={styles.statItem}>
          <View style={[styles.statIconContainer, { backgroundColor: 'rgba(46, 204, 113, 0.1)' }]}>
            <Icon name="car" size={24} color={COLORS.success} />
          </View>
          <Text style={styles.statValue}>{parkingData.free_spots}</Text>
          <Text style={styles.statLabel}>Free Spots</Text>
        </View>
        
        <View style={styles.statItem}>
          <View style={[styles.statIconContainer, { backgroundColor: 'rgba(231, 76, 60, 0.1)' }]}>
            <Icon name="car" size={24} color={COLORS.danger} />
          </View>
          <Text style={styles.statValue}>{parkingData.occupied_spots}</Text>
          <Text style={styles.statLabel}>Occupied</Text>
        </View>
        
        <View style={styles.statItem}>
          <View style={[styles.statIconContainer, { backgroundColor: 'rgba(52, 152, 219, 0.1)' }]}>
            <Icon name="percent" size={24} color={COLORS.primary} />
          </View>
          <Text style={styles.statValue}>{Math.round(parkingData.occupancy_rate * 100)}%</Text>
          <Text style={styles.statLabel}>Occupancy</Text>
        </View>
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={COLORS.background} />
      
      <ScrollView
        contentContainerStyle={styles.scrollContent}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={[COLORS.primary]}
          />
        }
      >
        <View style={styles.header}>
          <Text style={styles.headerTitle}>AI Parking</Text>
          <TouchableOpacity onPress={() => navigation.navigate('Profile')}>
            <View style={styles.avatarContainer}>
              <Text style={styles.avatarText}>JS</Text>
            </View>
          </TouchableOpacity>
        </View>
        
        <View style={styles.welcomeContainer}>
          <Text style={styles.welcomeText}>Welcome back,</Text>
          <Text style={styles.userName}>John Smith</Text>
        </View>
        
        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color={COLORS.primary} />
            <Text style={styles.loadingText}>Loading parking data...</Text>
          </View>
        ) : (
          <>
            {renderParkingStats()}
            
            <View style={styles.actionCard}>
              <View style={styles.actionCardHeader}>
                <Text style={styles.actionCardTitle}>Quick Actions</Text>
              </View>
              
              <View style={styles.actionButtons}>
                <TouchableOpacity
                  style={styles.actionButton}
                  onPress={() => navigation.navigate('FindParking')}
                >
                  <View style={[styles.actionIconContainer, { backgroundColor: 'rgba(46, 204, 113, 0.1)' }]}>
                    <Icon name="search-location" size={24} color={COLORS.success} />
                  </View>
                  <Text style={styles.actionText}>Find Parking</Text>
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={styles.actionButton}
                  onPress={() => navigation.navigate('ReserveSpot')}
                >
                  <View style={[styles.actionIconContainer, { backgroundColor: 'rgba(52, 152, 219, 0.1)' }]}>
                    <Icon name="calendar-plus" size={24} color={COLORS.primary} />
                  </View>
                  <Text style={styles.actionText}>Reserve Spot</Text>
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={styles.actionButton}
                  onPress={() => navigation.navigate('Reservations')}
                >
                  <View style={[styles.actionIconContainer, { backgroundColor: 'rgba(243, 156, 18, 0.1)' }]}>
                    <Icon name="calendar-alt" size={24} color={COLORS.warning} />
                  </View>
                  <Text style={styles.actionText}>My Reservations</Text>
                </TouchableOpacity>
              </View>
            </View>
            
            <View style={styles.card}>
              <View style={styles.cardHeader}>
                <Text style={styles.cardTitle}>Live Camera View</Text>
                <TouchableOpacity>
                  <Icon name="expand" size={16} color={COLORS.gray} />
                </TouchableOpacity>
              </View>
              
              <Image
                source={{ uri: 'https://via.placeholder.com/400x200' }}
                style={styles.cameraPreview}
                resizeMode="cover"
              />
              
              <View style={styles.liveIndicator}>
                <View style={styles.liveIndicatorDot} />
                <Text style={styles.liveIndicatorText}>LIVE</Text>
              </View>
              
              <Text style={styles.cameraUpdateTime}>
                Last updated: {new Date().toLocaleTimeString()}
              </Text>
            </View>
          </>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

// Find Parking Screen
const FindParkingScreen = () => {
  const [loading, setLoading] = useState(true);
  const [parkingSpots, setParkingSpots] = useState([]);

  useEffect(() => {
    // Load parking spots data
    const loadParkingSpots = () => {
      // In a real app, we would call an API
      // For demo, simulate API call
      setTimeout(() => {
        // Mock parking spots data
        const spots = Array.from({ length: 20 }, (_, i) => ({
          id: i + 1,
          label: `Spot #${i + 1}`,
          occupied: Math.random() > 0.4, // 60% chance of being free
          coordinates: {
            latitude: 37.78825 + (Math.random() - 0.5) * 0.002,
            longitude: -122.4324 + (Math.random() - 0.5) *
