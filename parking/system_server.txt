from flask import Flask, request, jsonify, render_template, Response, send_from_directory
import cv2
import numpy as np
import json
import os
import threading
import time
import hashlib
from datetime import datetime, timedelta
import logging
from werkzeug.utils import secure_filename

# Import our custom modules
from parking_detector import ParkingSpotDetector
from parking_database import ParkingDatabase

# Initialize Flask app
app = Flask(__name__, 
            static_folder="static",
            template_folder="templates")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("parking_server.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Global variables
detector = None
db = None
camera = None
frame_buffer = None
monitoring_thread = None
monitoring_active = False
upload_folder = 'uploads'

# Create upload folder if not exists
os.makedirs(upload_folder, exist_ok=True)

# Flask configuration
app.config['UPLOAD_FOLDER'] = upload_folder
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max upload
app.secret_key = 'your_secure_secret_key_here'  # Change this in production!

# Initialize components
def init_components():
    global detector, db, camera
    
    # Initialize database
    db = ParkingDatabase()
    
    # Initialize detector
    detector = ParkingSpotDetector()
    
    # Load spots from database
    spots_data = db.get_parking_spots()
    if spots_data:
        detector.spots = [spot["coordinates"] for spot in spots_data]
        logger.info(f"Loaded {len(detector.spots)} parking spots from database")
    
    # Initialize camera
    camera = cv2.VideoCapture(0)  # Use 0 for webcam, or provide video file path
    if not camera.isOpened():
        logger.error("Error: Could not open video source")
    else:
        logger.info("Camera initialized successfully")


# Monitoring thread function
def monitor_parking():
    global frame_buffer, monitoring_active
    
    logger.info("Starting parking monitoring thread")
    last_save_time = time.time()
    save_interval = 60  # Save to database every 60 seconds
    
    while monitoring_active:
        try:
            if camera and camera.isOpened():
                ret, frame = camera.read()
                if ret:
                    # Detect parking spot occupancy
                    detector.detect_occupancy(frame)
                    
                    # Visualize results
                    vis_frame = detector.visualize(frame)
                    
                    # Update frame buffer for streaming
                    _, buffer = cv2.imencode('.jpg', vis_frame)
                    frame_buffer = buffer.tobytes()
                    
                    # Save to database at specified intervals
                    current_time = time.time()
                    if current_time - last_save_time >= save_interval:
                        parking_data = detector.get_parking_data()
                        db.save_occupancy_data(parking_data)
                        logger.info(f"Saved parking data: {parking_data['occupied_spots']}/{parking_data['total_spots']} spots occupied")
                        last_save_time = current_time
                        
                    # Small delay to prevent CPU overuse
                    time.sleep(0.1)
                else:
                    logger.warning("Failed to read frame from camera")
                    time.sleep(1)

# Start/stop monitoring functions
def start_monitoring():
    global monitoring_thread, monitoring_active
    
    if monitoring_active:
        logger.info("Monitoring already active")
        return False
    
    monitoring_active = True
    monitoring_thread = threading.Thread(target=monitor_parking)
    monitoring_thread.daemon = True
    monitoring_thread.start()
    
    logger.info("Parking monitoring started")
    return True

def stop_monitoring():
    global monitoring_active
    
    if not monitoring_active:
        logger.info("Monitoring already stopped")
        return False
    
    monitoring_active = False
    if monitoring_thread:
        monitoring_thread.join(timeout=3)
    
    logger.info("Parking monitoring stopped")
    return True

# Helper function to generate password hash
def hash_password(password):
    """Generate a secure hash for a password"""
    return hashlib.sha256(password.encode()).hexdigest()

# API Route: Stream video feed
@app.route('/video_feed')
def video_feed():
    """Stream parking monitoring video feed"""
    def generate():
        while True:
            if frame_buffer is not None:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame_buffer + b'\r\n')
            else:
                # If no frame available, return a blank frame
                blank_frame = np.zeros((480, 640, 3), np.uint8)
                _, buffer = cv2.imencode('.jpg', blank_frame)
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
            time.sleep(0.1)
    
    return Response(generate(),
                   mimetype='multipart/x-mixed-replace; boundary=frame')

# API Route: Get current parking status
@app.route('/api/status', methods=['GET'])
def get_status():
    """Get current parking status"""
    try:
        # If monitoring is active, use the latest data from detector
        if monitoring_active and detector:
            return jsonify(detector.get_parking_data())
        
        # Otherwise, get the latest data from database
        latest = db.get_latest_occupancy()
        if latest:
            return jsonify(latest)
        
        return jsonify({"error": "No parking data available"}), 404
    except Exception as e:
        logger.error(f"Error getting status: {e}")
        return jsonify({"error": str(e)}), 500

# API Route: Get parking history
@app.route('/api/history', methods=['GET'])
def get_history():
    """Get parking occupancy history"""
    try:
        hours = request.args.get('hours', default=24, type=int)
        history = db.get_occupancy_history(hours)
        return jsonify(history)
    except Exception as e:
        logger.error(f"Error getting history: {e}")
        return jsonify({"error": str(e)}), 500

# API Route: Define parking spots
@app.route('/api/spots', methods=['GET', 'POST'])
def manage_spots():
    """Get or update parking spot definitions"""
    if request.method == 'GET':
        # Get spots from database
        spots = db.get_parking_spots()
        return jsonify(spots)
    
    elif request.method == 'POST':
        try:
            spots_data = request.json
            
            # Validate spots data
            if not isinstance(spots_data, list):
                return jsonify({"error": "Invalid spots data format"}), 400
            
            # Update detector spots
            detector.spots = spots_data
            
            # Save to database
            success = db.save_parking_spots(spots_data)
            
            if success:
                return jsonify({"status": f"Successfully saved {len(spots_data)} spots"})
            else:
                return jsonify({"error": "Failed to save spots to database"}), 500
        except Exception as e:
            logger.error(f"Error managing spots: {e}")
            return jsonify({"error": str(e)}), 500

# API Route: Start monitoring
@app.route('/api/monitoring/start', methods=['POST'])
def api_start_monitoring():
    """Start parking spot monitoring"""
    success = start_monitoring()
    return jsonify({"status": "started" if success else "already running"})

# API Route: Stop monitoring
@app.route('/api/monitoring/stop', methods=['POST'])
def api_stop_monitoring():
    """Stop parking spot monitoring"""
    success = stop_monitoring()
    return jsonify({"status": "stopped" if success else "already stopped"})

# API Route: Get monitoring status
@app.route('/api/monitoring/status', methods=['GET'])
def api_monitoring_status():
    """Get monitoring status"""
    return jsonify({"active": monitoring_active})

# API Route: User registration
@app.route('/api/users/register', methods=['POST'])
def register_user():
    """Register a new user"""
    try:
        data = request.json
        username = data.get('username')
        password = data.get('password')
        email = data.get('email')
        
        if not username or not password:
            return jsonify({"error": "Username and password required"}), 400
        
        # Hash password before storing
        password_hash = hash_password(password)
        
        # Register user in database
        user_id = db.register_user(username, password_hash, email)
        
        if user_id:
            return jsonify({"status": "success", "user_id": user_id})
        else:
            return jsonify({"error": "Username or email already exists"}), 409
    except Exception as e:
        logger.error(f"Error registering user: {e}")
        return jsonify({"error": str(e)}), 500

# API Route: User login
@app.route('/api/users/login', methods=['POST'])
def login_user():
    """Authenticate a user"""
    try:
        data = request.json
        username = data.get('username')
        password = data.get('password')
        
        if not username or not password:
            return jsonify({"error": "Username and password required"}), 400
        
        # Hash password for comparison
        password_hash = hash_password(password)
        
        # Authenticate user
        user = db.authenticate_user(username, password_hash)
        
        if user:
            return jsonify({"status": "success", "user": user})
        else:
            return jsonify({"error": "Invalid username or password"}), 401
    except Exception as e:
        logger.error(f"Error logging in user: {e}")
        return jsonify({"error": str(e)}), 500

# API Route: Create reservation
@app.route('/api/reservations', methods=['POST'])
def create_reservation():
    """Create a new parking spot reservation"""
    try:
        data = request.json
        user_id = data.get('user_id')
        spot_id = data.get('spot_id')
        start_time = data.get('start_time', datetime.now().isoformat())
        end_time = data.get('end_time')
        
        if not user_id or not spot_id:
            return jsonify({"error": "User ID and spot ID required"}), 400
        
        # Create reservation in database
        reservation_id = db.create_reservation(user_id, spot_id, start_time, end_time)
        
        if reservation_id:
            return jsonify({"status": "success", "reservation_id": reservation_id})
        else:
            return jsonify({"error": "Failed to create reservation"}), 500
    except Exception as e:
        logger.error(f"Error creating reservation: {e}")
        return jsonify({"error": str(e)}), 500

# API Route: Get user reservations
@app.route('/api/users/<int:user_id>/reservations', methods=['GET'])
def get_user_reservations(user_id):
    """Get all reservations for a user"""
    try:
        reservations = db.get_user_reservations(user_id)
        return jsonify(reservations)
    except Exception as e:
        logger.error(f"Error getting reservations: {e}")
        return jsonify({"error": str(e)}), 500

# API Route: Cancel reservation
@app.route('/api/reservations/<int:reservation_id>/cancel', methods=['POST'])
def cancel_reservation(reservation_id):
    """Cancel a reservation"""
    try:
        data = request.json
        user_id = data.get('user_id')
        
        if not user_id:
            return jsonify({"error": "User ID required"}), 400
        
        # Cancel reservation in database
        success = db.cancel_reservation(reservation_id, user_id)
        
        if success:
            return jsonify({"status": "success"})
        else:
            return jsonify({"error": "Failed to cancel reservation"}), 500
    except Exception as e:
        logger.error(f"Error cancelling reservation: {e}")
        return jsonify({"error": str(e)}), 500

# Web Route: Home page
@app.route('/')
def home():
    """Render home page"""
    return render_template('index.html')

# Web Route: Admin dashboard
@app.route('/admin')
def admin_dashboard():
    """Render admin dashboard"""
    return render_template('admin.html')

# Web Route: User dashboard
@app.route('/dashboard')
def user_dashboard():
    """Render user dashboard"""
    return render_template('dashboard.html')

# Initialize components and start app
if __name__ == "__main__":
    init_components()
    start_monitoring()
    
    try:
        # Start the Flask app
        app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)
    finally:
        # Cleanup when app exits
        stop_monitoring()
        if camera and camera.isOpened():
            camera.release()
            else:
                logger.warning("Camera not available")
                time.sleep(1)
                
        except Exception as e:
            logger.error(f"Error in monitoring thread: {e}")
            time.sleep(1)
