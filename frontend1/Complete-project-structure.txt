# Alumni Portal - Complete Project Structure

## Project Overview
```
alumni-portal/
├── backend/               # FastAPI backend
│   ├── app/               # Application code
│   │   ├── api/           # API endpoints
│   │   ├── core/          # Core functionality
│   │   ├── models/        # Database models
│   │   ├── schemas/       # Pydantic schemas
│   │   └── main.py        # Main FastAPI application
│   ├── alembic/           # Database migrations
│   ├── requirements.txt   # Python dependencies
│   └── .env               # Environment variables
└── frontend/              # React frontend
    ├── public/            # Static files
    ├── src/               # Source code
    │   ├── components/    # React components
    │   ├── contexts/      # Context providers
    │   ├── hooks/         # Custom hooks
    │   ├── pages/         # Page components
    │   ├── services/      # API services
    │   └── utils/         # Utility functions
    ├── package.json       # NPM dependencies
    └── .env               # Environment variables
```

## Setup Instructions

### Backend Setup (FastAPI)

1. **Create a virtual environment**:
   ```bash
   cd alumni-portal/backend
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

2. **Install dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

3. **Create database**:
   ```bash
   # Make sure PostgreSQL is running
   createdb alumni_portal
   ```

4. **Apply migrations**:
   ```bash
   alembic upgrade head
   ```

5. **Run backend server**:
   ```bash
   uvicorn app.main:app --reload
   ```

6. **Access API documentation**:
   - Swagger UI: http://localhost:8000/docs
   - ReDoc: http://localhost:8000/redoc

### Frontend Setup (React)

1. **Install dependencies**:
   ```bash
   cd alumni-portal/frontend
   npm install
   ```

2. **Run development server**:
   ```bash
   npm start
   ```

3. **Access frontend**:
   - http://localhost:3000

## Key Files and Folders

### Backend

1. **app/main.py**: FastAPI application definition
2. **app/api/**: API routes for authentication, users, events, etc.
3. **app/models/**: SQLAlchemy database models
4. **app/schemas/**: Pydantic schemas for request/response validation
5. **app/core/**: Core functionality like security, config, etc.

### Frontend

1. **src/App.tsx**: Main application component with routing
2. **src/contexts/AuthContext.tsx**: Authentication state management
3. **src/components/**: Reusable UI components
4. **src/pages/**: Page components for each route
5. **src/services/**: API service for backend communication

## API Endpoints

### Authentication

- `POST /api/auth/register` - Register a new user
- `POST /api/auth/login` - Login and get access token
- `GET /api/auth/me` - Get current user information

### Users

- `GET /api/users/search` - Search alumni directory (requires membership)
- `GET /api/users/{id}` - Get user profile by ID
- `PUT /api/users/profile` - Update user profile

### Events

- `GET /api/events` - Get all events
- `GET /api/events/{id}` - Get event details by ID
- `POST /api/events` - Create a new event (admin only)
- `PUT /api/events/{id}` - Update an event (admin only)
- `DELETE /api/events/{id}` - Delete an event (admin only)

### Registrations

- `POST /api/registrations` - Register for an event
- `GET /api/registrations/my-events` - Get user's registered events
- `DELETE /api/registrations/{eventId}` - Cancel registration

### Memberships

- `POST /api/memberships` - Create a new membership
- `GET /api/memberships/my-membership` - Get user's membership status
- `PUT /api/memberships/{id}/cancel` - Cancel membership

### Payments

- `POST /api/payments/create-intent` - Create a payment intent
- `POST /api/payments/webhook` - Handle Stripe webhook events
- `GET /api/payments/config` - Get Stripe public key

## Frontend Routes

- `/` - Home/Landing page
- `/login` - Login page
- `/register` - Registration page
- `/dashboard` - User dashboard (authenticated)
- `/events` - Events listing page
- `/events/:id` - Event details page
- `/directory` - Alumni directory (requires membership)
- `/profile` - User profile page (authenticated)
- `/membership` - Membership plans page (authenticated)

## Environment Variables

### Backend (.env)

```
DATABASE_URL=postgresql://postgres:postgres@localhost/alumni_portal
SECRET_KEY=your-secret-key-here
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
STRIPE_SECRET_KEY=your-stripe-secret-key
STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret
FRONTEND_URL=http://localhost:3000
```

### Frontend (.env)

```
REACT_APP_API_URL=http://localhost:8000
REACT_APP_STRIPE_PUBLIC_KEY=your-stripe-public-key
```

## Default Admin User

- Email: admin@alumni.org
- Password: admin123
