# Alumni Portal Frontend Setup Guide

## Project Setup

First, let's create a new React application using Create React App with TypeScript:

```bash
npx create-react-app alumni-portal-frontend --template typescript
cd alumni-portal-frontend
```

## Installing Dependencies

Install necessary dependencies for a modern, beautiful UI:

```bash
# UI Framework and components
npm install @mui/material @emotion/react @emotion/styled @mui/icons-material

# Routing
npm install react-router-dom

# Form handling
npm install formik yup

# HTTP client
npm install axios

# Date handling
npm install date-fns

# State management
npm install zustand

# Image handling and animations
npm install react-image-crop framer-motion

# Advanced components
npm install react-calendar react-datepicker

# Styling utilities
npm install tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

## Project Structure

Create the following folder structure:

```
src/
├── assets/
│   ├── images/
│   └── styles/
├── components/
│   ├── common/
│   ├── auth/
│   ├── dashboard/
│   ├── events/
│   ├── directory/
│   ├── profile/
│   └── membership/
├── contexts/
├── hooks/
├── pages/
├── services/
├── types/
└── utils/
```

## Configure Tailwind CSS

Update the tailwind.config.js file:

```javascript
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          light: '#4dabf5',
          main: '#2196f3',
          dark: '#1769aa',
        },
        secondary: {
          light: '#f73378',
          main: '#f50057',
          dark: '#ab003c',
        },
        background: {
          default: '#f5f5f5',
          paper: '#ffffff',
        }
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
        serif: ['Merriweather', 'serif'],
      },
      spacing: {
        '128': '32rem',
      }
    },
  },
  plugins: [],
}
```

Add Tailwind directives to your index.css:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Merriweather:wght@400;700&display=swap');

body {
  margin: 0;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f5f5f5;
}

/* Custom utility classes */
@layer components {
  .btn-primary {
    @apply bg-primary-main text-white px-4 py-2 rounded-md hover:bg-primary-dark transition-all;
  }
  
  .btn-secondary {
    @apply bg-white text-primary-main border border-primary-main px-4 py-2 rounded-md hover:bg-gray-50 transition-all;
  }
  
  .card {
    @apply bg-white rounded-lg shadow-md p-6;
  }
  
  .input-field {
    @apply w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-light;
  }
}
```

## Configure Environment Variables

Create a .env file in the project root:

```
REACT_APP_API_URL=http://localhost:8000
REACT_APP_STRIPE_PUBLIC_KEY=your_stripe_public_key
```

## Configure API Services

Create a base API service in src/services/api.ts:

```typescript
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add a request interceptor to add the token to every request
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Add a response interceptor to handle authentication errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response && error.response.status === 401) {
      // Clear token and redirect to login
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;
```

## Configure Routing

Create a router setup in src/App.tsx:

```tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import useAuth from './hooks/useAuth';

// Import pages
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import DashboardPage from './pages/DashboardPage';
import EventsPage from './pages/EventsPage';
import EventDetailPage from './pages/EventDetailPage';
import DirectoryPage from './pages/DirectoryPage';
import ProfilePage from './pages/ProfilePage';
import MembershipPage from './pages/MembershipPage';

// Import components
import Layout from './components/layout/Layout';
import ProtectedRoute from './components/common/ProtectedRoute';

// Create theme
const theme = createTheme({
  palette: {
    primary: {
      light: '#4dabf5',
      main: '#2196f3',
      dark: '#1769aa',
    },
    secondary: {
      light: '#f73378',
      main: '#f50057',
      dark: '#ab003c',
    },
    background: {
      default: '#f5f5f5',
      paper: '#ffffff',
    },
  },
  typography: {
    fontFamily: '"Inter", "Helvetica", "Arial", sans-serif',
    h1: {
      fontFamily: '"Merriweather", serif',
      fontWeight: 700,
    },
    h2: {
      fontFamily: '"Merriweather", serif',
      fontWeight: 700,
    },
    h3: {
      fontWeight: 600,
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          textTransform: 'none',
          fontWeight: 600,
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 4px 20px rgba(0,0,0,0.05)',
        },
      },
    },
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Router>
        <Layout>
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/register" element={<RegisterPage />} />
            <Route path="/dashboard" element={
              <ProtectedRoute>
                <DashboardPage />
              </ProtectedRoute>
            } />
            <Route path="/events" element={<EventsPage />} />
            <Route path="/events/:id" element={<EventDetailPage />} />
            <Route path="/directory" element={
              <ProtectedRoute requiresMembership={true}>
                <DirectoryPage />
              </ProtectedRoute>
            } />
            <Route path="/profile" element={
              <ProtectedRoute>
                <ProfilePage />
              </ProtectedRoute>
            } />
            <Route path="/membership" element={
              <ProtectedRoute>
                <MembershipPage />
              </ProtectedRoute>
            } />
            <Route path="*" element={<Navigate to="/" />} />
          </Routes>
        </Layout>
      </Router>
    </ThemeProvider>
  );
}

export default App;
```

## Auth Context Setup

Create an auth context in src/contexts/AuthContext.tsx:

```tsx
import React, { createContext, useState, useEffect, ReactNode } from 'react';
import api from '../services/api';

interface User {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  isAdmin: boolean;
  hasMembership: boolean;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<void>;
  register: (userData: any) => Promise<void>;
  logout: () => void;
  checkMembership: () => Promise<boolean>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Check if user is already logged in
    const token = localStorage.getItem('token');
    if (token) {
      fetchUserData();
    } else {
      setLoading(false);
    }
  }, []);

  const fetchUserData = async () => {
    try {
      setLoading(true);
      const response = await api.get('/auth/me');
      setUser(response.data);
      setError(null);
    } catch (err) {
      console.error('Error fetching user data:', err);
      localStorage.removeItem('token');
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const login = async (email: string, password: string) => {
    try {
      setLoading(true);
      const response = await api.post('/auth/login', {
        username: email, // FastAPI OAuth2 expects 'username'
        password,
      }, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      });
      
      localStorage.setItem('token', response.data.access_token);
      await fetchUserData();
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Login failed');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const register = async (userData: any) => {
    try {
      setLoading(true);
      const response = await api.post('/auth/register', userData);
      localStorage.setItem('token', response.data.access_token);
      await fetchUserData();
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Registration failed');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
  };

  const checkMembership = async (): Promise<boolean> => {
    try {
      const response = await api.get('/memberships/my-membership');
      return response.data.has_membership;
    } catch (err) {
      console.error('Error checking membership:', err);
      return false;
    }
  };

  return (
    <AuthContext.Provider value={{ 
      user, 
      loading, 
      error, 
      login, 
      register, 
      logout,
      checkMembership 
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
```

Create a useAuth hook in src/hooks/useAuth.ts:

```typescript
import { useContext } from 'react';
import AuthContext from '../contexts/AuthContext';

const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default useAuth;
```

## Protected Route Component

Create a ProtectedRoute component in src/components/common/ProtectedRoute.tsx:

```tsx
import React, { useEffect, useState } from 'react';
import { Navigate } from 'react-router-dom';
import useAuth from '../../hooks/useAuth';
import LoadingSpinner from './LoadingSpinner';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiresMembership?: boolean;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children,
  requiresMembership = false
}) => {
  const { user, loading } = useAuth();
  const [membershipStatus, setMembershipStatus] = useState<boolean | null>(null);
  const [checkingMembership, setCheckingMembership] = useState(requiresMembership);
  
  useEffect(() => {
    const checkMembershipStatus = async () => {
      if (user && requiresMembership) {
        try {
          const hasMembership = await useAuth().checkMembership();
          setMembershipStatus(hasMembership);
        } catch (error) {
          setMembershipStatus(false);
        } finally {
          setCheckingMembership(false);
        }
      } else {
        setCheckingMembership(false);
      }
    };
    
    if (user && requiresMembership) {
      checkMembershipStatus();
    } else {
      setCheckingMembership(false);
    }
  }, [user, requiresMembership]);
  
  if (loading || checkingMembership) {
    return <LoadingSpinner />;
  }
  
  if (!user) {
    return <Navigate to="/login" />;
  }
  
  if (requiresMembership && !membershipStatus) {
    return <Navigate to="/membership" />;
  }
  
  return <>{children}</>;
};

export default ProtectedRoute;
```
